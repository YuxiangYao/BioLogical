// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_BF_isPointed
bool c_BF_isPointed(LogicalVector boolfunss, int k, char Leixing, bool Showit);
RcppExport SEXP _BioLogical_c_BF_isPointed(SEXP boolfunssSEXP, SEXP kSEXP, SEXP LeixingSEXP, SEXP ShowitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< char >::type Leixing(LeixingSEXP);
    Rcpp::traits::input_parameter< bool >::type Showit(ShowitSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BF_isPointed(boolfunss, k, Leixing, Showit));
    return rcpp_result_gen;
END_RCPP
}
// c_BF_Generator
Rcpp::IntegerVector c_BF_Generator(char Leixing, int k, double bias, IntegerVector Vars);
RcppExport SEXP _BioLogical_c_BF_Generator(SEXP LeixingSEXP, SEXP kSEXP, SEXP biasSEXP, SEXP VarsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< char >::type Leixing(LeixingSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Vars(VarsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BF_Generator(Leixing, k, bias, Vars));
    return rcpp_result_gen;
END_RCPP
}
// c_BF_Sensitivity
double c_BF_Sensitivity(LogicalVector& boolfunss, int k);
RcppExport SEXP _BioLogical_c_BF_Sensitivity(SEXP boolfunssSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector& >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BF_Sensitivity(boolfunss, k));
    return rcpp_result_gen;
END_RCPP
}
// c_BF_Effective
double c_BF_Effective(IntegerVector& boolfunss, int k);
RcppExport SEXP _BioLogical_c_BF_Effective(SEXP boolfunssSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BF_Effective(boolfunss, k));
    return rcpp_result_gen;
END_RCPP
}
// c_BF_Complexity
double c_BF_Complexity(IntegerVector& boolfunss, int k);
RcppExport SEXP _BioLogical_c_BF_Complexity(SEXP boolfunssSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BF_Complexity(boolfunss, k));
    return rcpp_result_gen;
END_RCPP
}
// c_BF_EffectiveEdges
Rcpp::NumericVector c_BF_EffectiveEdges(IntegerVector& boolfunss, int k);
RcppExport SEXP _BioLogical_c_BF_EffectiveEdges(SEXP boolfunssSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BF_EffectiveEdges(boolfunss, k));
    return rcpp_result_gen;
END_RCPP
}
// c_BF_QuineMcCluskey
void c_BF_QuineMcCluskey(IntegerVector& boolfunss, int k, CharacterVector VarsName);
RcppExport SEXP _BioLogical_c_BF_QuineMcCluskey(SEXP boolfunssSEXP, SEXP kSEXP, SEXP VarsNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type VarsName(VarsNameSEXP);
    c_BF_QuineMcCluskey(boolfunss, k, VarsName);
    return R_NilValue;
END_RCPP
}
// c_FrameTruthTable
Rcpp::IntegerMatrix c_FrameTruthTable(int VarNum);
RcppExport SEXP _BioLogical_c_FrameTruthTable(SEXP VarNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type VarNum(VarNumSEXP);
    rcpp_result_gen = Rcpp::wrap(c_FrameTruthTable(VarNum));
    return rcpp_result_gen;
END_RCPP
}
// c_B_NestedCanalized
Rcpp::List c_B_NestedCanalized(IntegerVector boolfunss, int k);
RcppExport SEXP _BioLogical_c_B_NestedCanalized(SEXP boolfunssSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type boolfunss(boolfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(c_B_NestedCanalized(boolfunss, k));
    return rcpp_result_gen;
END_RCPP
}
// c_Derrida_Simualtion
double c_Derrida_Simualtion(int sys_size, int ll_system, int sim_step, char obf_type, Rcpp::NumericVector bias_rf, double obf_ratio, double init_dis, Rcpp::NumericVector init_1_ratio, char net_type, double net_f_para, int obf_i_para1, int obf_i_para2, int RuleType);
RcppExport SEXP _BioLogical_c_Derrida_Simualtion(SEXP sys_sizeSEXP, SEXP ll_systemSEXP, SEXP sim_stepSEXP, SEXP obf_typeSEXP, SEXP bias_rfSEXP, SEXP obf_ratioSEXP, SEXP init_disSEXP, SEXP init_1_ratioSEXP, SEXP net_typeSEXP, SEXP net_f_paraSEXP, SEXP obf_i_para1SEXP, SEXP obf_i_para2SEXP, SEXP RuleTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sys_size(sys_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type ll_system(ll_systemSEXP);
    Rcpp::traits::input_parameter< int >::type sim_step(sim_stepSEXP);
    Rcpp::traits::input_parameter< char >::type obf_type(obf_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bias_rf(bias_rfSEXP);
    Rcpp::traits::input_parameter< double >::type obf_ratio(obf_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type init_dis(init_disSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init_1_ratio(init_1_ratioSEXP);
    Rcpp::traits::input_parameter< char >::type net_type(net_typeSEXP);
    Rcpp::traits::input_parameter< double >::type net_f_para(net_f_paraSEXP);
    Rcpp::traits::input_parameter< int >::type obf_i_para1(obf_i_para1SEXP);
    Rcpp::traits::input_parameter< int >::type obf_i_para2(obf_i_para2SEXP);
    Rcpp::traits::input_parameter< int >::type RuleType(RuleTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(c_Derrida_Simualtion(sys_size, ll_system, sim_step, obf_type, bias_rf, obf_ratio, init_dis, init_1_ratio, net_type, net_f_para, obf_i_para1, obf_i_para2, RuleType));
    return rcpp_result_gen;
END_RCPP
}
// c_Percolation_Simualtion
Rcpp::List c_Percolation_Simualtion(int sys_size, int ll_system, int sim_step, int lat_type, int obr_window, char obf_type, Rcpp::NumericVector bias_rf, double obf_ratio, Rcpp::NumericVector init_bias, char net_type, double net_f_para, int obf_i_para1, int obf_i_para2, bool OutPut, int RuleType);
RcppExport SEXP _BioLogical_c_Percolation_Simualtion(SEXP sys_sizeSEXP, SEXP ll_systemSEXP, SEXP sim_stepSEXP, SEXP lat_typeSEXP, SEXP obr_windowSEXP, SEXP obf_typeSEXP, SEXP bias_rfSEXP, SEXP obf_ratioSEXP, SEXP init_biasSEXP, SEXP net_typeSEXP, SEXP net_f_paraSEXP, SEXP obf_i_para1SEXP, SEXP obf_i_para2SEXP, SEXP OutPutSEXP, SEXP RuleTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sys_size(sys_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type ll_system(ll_systemSEXP);
    Rcpp::traits::input_parameter< int >::type sim_step(sim_stepSEXP);
    Rcpp::traits::input_parameter< int >::type lat_type(lat_typeSEXP);
    Rcpp::traits::input_parameter< int >::type obr_window(obr_windowSEXP);
    Rcpp::traits::input_parameter< char >::type obf_type(obf_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bias_rf(bias_rfSEXP);
    Rcpp::traits::input_parameter< double >::type obf_ratio(obf_ratioSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init_bias(init_biasSEXP);
    Rcpp::traits::input_parameter< char >::type net_type(net_typeSEXP);
    Rcpp::traits::input_parameter< double >::type net_f_para(net_f_paraSEXP);
    Rcpp::traits::input_parameter< int >::type obf_i_para1(obf_i_para1SEXP);
    Rcpp::traits::input_parameter< int >::type obf_i_para2(obf_i_para2SEXP);
    Rcpp::traits::input_parameter< bool >::type OutPut(OutPutSEXP);
    Rcpp::traits::input_parameter< int >::type RuleType(RuleTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(c_Percolation_Simualtion(sys_size, ll_system, sim_step, lat_type, obr_window, obf_type, bias_rf, obf_ratio, init_bias, net_type, net_f_para, obf_i_para1, obf_i_para2, OutPut, RuleType));
    return rcpp_result_gen;
END_RCPP
}
// c_ScalingLaw_Simualtion
Rcpp::List c_ScalingLaw_Simualtion(int sys_size, int ll_system, char obf_type, Rcpp::NumericVector bias_rf, double obf_ratio, char net_type, double net_f_para, int obf_i_para1, int obf_i_para2, Rcpp::IntegerVector PointedNode, Rcpp::IntegerVector PointValues, int NodeDetailInfor, int ReturnResidualNetwork);
RcppExport SEXP _BioLogical_c_ScalingLaw_Simualtion(SEXP sys_sizeSEXP, SEXP ll_systemSEXP, SEXP obf_typeSEXP, SEXP bias_rfSEXP, SEXP obf_ratioSEXP, SEXP net_typeSEXP, SEXP net_f_paraSEXP, SEXP obf_i_para1SEXP, SEXP obf_i_para2SEXP, SEXP PointedNodeSEXP, SEXP PointValuesSEXP, SEXP NodeDetailInforSEXP, SEXP ReturnResidualNetworkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sys_size(sys_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type ll_system(ll_systemSEXP);
    Rcpp::traits::input_parameter< char >::type obf_type(obf_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bias_rf(bias_rfSEXP);
    Rcpp::traits::input_parameter< double >::type obf_ratio(obf_ratioSEXP);
    Rcpp::traits::input_parameter< char >::type net_type(net_typeSEXP);
    Rcpp::traits::input_parameter< double >::type net_f_para(net_f_paraSEXP);
    Rcpp::traits::input_parameter< int >::type obf_i_para1(obf_i_para1SEXP);
    Rcpp::traits::input_parameter< int >::type obf_i_para2(obf_i_para2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PointedNode(PointedNodeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type PointValues(PointValuesSEXP);
    Rcpp::traits::input_parameter< int >::type NodeDetailInfor(NodeDetailInforSEXP);
    Rcpp::traits::input_parameter< int >::type ReturnResidualNetwork(ReturnResidualNetworkSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ScalingLaw_Simualtion(sys_size, ll_system, obf_type, bias_rf, obf_ratio, net_type, net_f_para, obf_i_para1, obf_i_para2, PointedNode, PointValues, NodeDetailInfor, ReturnResidualNetwork));
    return rcpp_result_gen;
END_RCPP
}
// c_ScalingLaw_RealNet
Rcpp::List c_ScalingLaw_RealNet(Rcpp::List aRealNet, IntegerVector PointedGene, IntegerVector PointValues, IntegerVector InD, IntegerVector OtD, int NodeDetailInfor, int ReturnResidualNetwork);
RcppExport SEXP _BioLogical_c_ScalingLaw_RealNet(SEXP aRealNetSEXP, SEXP PointedGeneSEXP, SEXP PointValuesSEXP, SEXP InDSEXP, SEXP OtDSEXP, SEXP NodeDetailInforSEXP, SEXP ReturnResidualNetworkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type aRealNet(aRealNetSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type PointedGene(PointedGeneSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type PointValues(PointValuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type InD(InDSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type OtD(OtDSEXP);
    Rcpp::traits::input_parameter< int >::type NodeDetailInfor(NodeDetailInforSEXP);
    Rcpp::traits::input_parameter< int >::type ReturnResidualNetwork(ReturnResidualNetworkSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ScalingLaw_RealNet(aRealNet, PointedGene, PointValues, InD, OtD, NodeDetailInfor, ReturnResidualNetwork));
    return rcpp_result_gen;
END_RCPP
}
// c_CoreDynamicNode
Rcpp::List c_CoreDynamicNode(Rcpp::List aRealNet, IntegerVector PointedGene, IntegerVector PointValues, IntegerVector InD, IntegerVector OtD, int NodeDetailInfor, int ReturnResidualNetwork, int Times);
RcppExport SEXP _BioLogical_c_CoreDynamicNode(SEXP aRealNetSEXP, SEXP PointedGeneSEXP, SEXP PointValuesSEXP, SEXP InDSEXP, SEXP OtDSEXP, SEXP NodeDetailInforSEXP, SEXP ReturnResidualNetworkSEXP, SEXP TimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type aRealNet(aRealNetSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type PointedGene(PointedGeneSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type PointValues(PointValuesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type InD(InDSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type OtD(OtDSEXP);
    Rcpp::traits::input_parameter< int >::type NodeDetailInfor(NodeDetailInforSEXP);
    Rcpp::traits::input_parameter< int >::type ReturnResidualNetwork(ReturnResidualNetworkSEXP);
    Rcpp::traits::input_parameter< int >::type Times(TimesSEXP);
    rcpp_result_gen = Rcpp::wrap(c_CoreDynamicNode(aRealNet, PointedGene, PointValues, InD, OtD, NodeDetailInfor, ReturnResidualNetwork, Times));
    return rcpp_result_gen;
END_RCPP
}
// c_BoolFun2Polynomial
Rcpp::List c_BoolFun2Polynomial(Rcpp::IntegerMatrix& VariableMat, Rcpp::IntegerVector& MapTab, int LogiSpin);
RcppExport SEXP _BioLogical_c_BoolFun2Polynomial(SEXP VariableMatSEXP, SEXP MapTabSEXP, SEXP LogiSpinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type VariableMat(VariableMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type MapTab(MapTabSEXP);
    Rcpp::traits::input_parameter< int >::type LogiSpin(LogiSpinSEXP);
    rcpp_result_gen = Rcpp::wrap(c_BoolFun2Polynomial(VariableMat, MapTab, LogiSpin));
    return rcpp_result_gen;
END_RCPP
}
// c_StrongConnectComponent
Rcpp::List c_StrongConnectComponent(Rcpp::List aRealNet, Rcpp::IntegerVector& InD, Rcpp::IntegerVector& OtD);
RcppExport SEXP _BioLogical_c_StrongConnectComponent(SEXP aRealNetSEXP, SEXP InDSEXP, SEXP OtDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type aRealNet(aRealNetSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type InD(InDSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type OtD(OtDSEXP);
    rcpp_result_gen = Rcpp::wrap(c_StrongConnectComponent(aRealNet, InD, OtD));
    return rcpp_result_gen;
END_RCPP
}
// c_MulF_Complexity
double c_MulF_Complexity(IntegerVector& avec, int k, int L);
RcppExport SEXP _BioLogical_c_MulF_Complexity(SEXP avecSEXP, SEXP kSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulF_Complexity(avec, k, L));
    return rcpp_result_gen;
END_RCPP
}
// c_MulF_Effective
double c_MulF_Effective(IntegerVector& avec, int k, int L);
RcppExport SEXP _BioLogical_c_MulF_Effective(SEXP avecSEXP, SEXP kSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulF_Effective(avec, k, L));
    return rcpp_result_gen;
END_RCPP
}
// c_MulF_EffectiveEdges
Rcpp::NumericVector c_MulF_EffectiveEdges(IntegerVector& avec, int k, int L);
RcppExport SEXP _BioLogical_c_MulF_EffectiveEdges(SEXP avecSEXP, SEXP kSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulF_EffectiveEdges(avec, k, L));
    return rcpp_result_gen;
END_RCPP
}
// c_MulF_QuineMcCluskey
IntegerMatrix c_MulF_QuineMcCluskey(IntegerVector& avec, int k, int L);
RcppExport SEXP _BioLogical_c_MulF_QuineMcCluskey(SEXP avecSEXP, SEXP kSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulF_QuineMcCluskey(avec, k, L));
    return rcpp_result_gen;
END_RCPP
}
// c_MulVF_Generator
Rcpp::IntegerVector c_MulVF_Generator(char FunType, int k, int L, int CanaDeep, Rcpp::IntegerVector& CanaVar, Rcpp::IntegerVector& CanaVarNum, Rcpp::List& CanaInfo1, Rcpp::List& CanaInfo2, Rcpp::NumericVector& bias, bool Cana_Free);
RcppExport SEXP _BioLogical_c_MulVF_Generator(SEXP FunTypeSEXP, SEXP kSEXP, SEXP LSEXP, SEXP CanaDeepSEXP, SEXP CanaVarSEXP, SEXP CanaVarNumSEXP, SEXP CanaInfo1SEXP, SEXP CanaInfo2SEXP, SEXP biasSEXP, SEXP Cana_FreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< char >::type FunType(FunTypeSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type CanaDeep(CanaDeepSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type CanaVar(CanaVarSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type CanaVarNum(CanaVarNumSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type CanaInfo1(CanaInfo1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type CanaInfo2(CanaInfo2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< bool >::type Cana_Free(Cana_FreeSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulVF_Generator(FunType, k, L, CanaDeep, CanaVar, CanaVarNum, CanaInfo1, CanaInfo2, bias, Cana_Free));
    return rcpp_result_gen;
END_RCPP
}
// c_MulVF_Sensitivity
double c_MulVF_Sensitivity(Rcpp::IntegerVector& amulfunss, int k, int L, int Lens);
RcppExport SEXP _BioLogical_c_MulVF_Sensitivity(SEXP amulfunssSEXP, SEXP kSEXP, SEXP LSEXP, SEXP LensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type amulfunss(amulfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type Lens(LensSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulVF_Sensitivity(amulfunss, k, L, Lens));
    return rcpp_result_gen;
END_RCPP
}
// c_M_NestedCanalized
Rcpp::List c_M_NestedCanalized(Rcpp::IntegerVector& amulfunss, int k, int L, int Lens);
RcppExport SEXP _BioLogical_c_M_NestedCanalized(SEXP amulfunssSEXP, SEXP kSEXP, SEXP LSEXP, SEXP LensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type amulfunss(amulfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type Lens(LensSEXP);
    rcpp_result_gen = Rcpp::wrap(c_M_NestedCanalized(amulfunss, k, L, Lens));
    return rcpp_result_gen;
END_RCPP
}
// c_M_Threshold
Rcpp::List c_M_Threshold(Rcpp::IntegerVector& amulfunss, int k, int L, int Lens);
RcppExport SEXP _BioLogical_c_M_Threshold(SEXP amulfunssSEXP, SEXP kSEXP, SEXP LSEXP, SEXP LensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type amulfunss(amulfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type Lens(LensSEXP);
    rcpp_result_gen = Rcpp::wrap(c_M_Threshold(amulfunss, k, L, Lens));
    return rcpp_result_gen;
END_RCPP
}
// c_M_Domainted
Rcpp::List c_M_Domainted(Rcpp::IntegerVector& amulfunss, int k, int L, int Lens);
RcppExport SEXP _BioLogical_c_M_Domainted(SEXP amulfunssSEXP, SEXP kSEXP, SEXP LSEXP, SEXP LensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type amulfunss(amulfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type Lens(LensSEXP);
    rcpp_result_gen = Rcpp::wrap(c_M_Domainted(amulfunss, k, L, Lens));
    return rcpp_result_gen;
END_RCPP
}
// c_M_Signed
Rcpp::List c_M_Signed(Rcpp::IntegerVector& amulfunss, int k, int L, int Lens);
RcppExport SEXP _BioLogical_c_M_Signed(SEXP amulfunssSEXP, SEXP kSEXP, SEXP LSEXP, SEXP LensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type amulfunss(amulfunssSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type Lens(LensSEXP);
    rcpp_result_gen = Rcpp::wrap(c_M_Signed(amulfunss, k, L, Lens));
    return rcpp_result_gen;
END_RCPP
}
// c_MulVFun2Polynomial
Rcpp::List c_MulVFun2Polynomial(Rcpp::IntegerMatrix& VariableMat, Rcpp::IntegerVector& MapTab, int k, int L);
RcppExport SEXP _BioLogical_c_MulVFun2Polynomial(SEXP VariableMatSEXP, SEXP MapTabSEXP, SEXP kSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type VariableMat(VariableMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type MapTab(MapTabSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulVFun2Polynomial(VariableMat, MapTab, k, L));
    return rcpp_result_gen;
END_RCPP
}
// c_MulV2Bool_Bool2MulV
Rcpp::IntegerVector c_MulV2Bool_Bool2MulV(Rcpp::IntegerVector OriMapTab, int k, int L, Rcpp::IntegerVector Thresholds, int b2m);
RcppExport SEXP _BioLogical_c_MulV2Bool_Bool2MulV(SEXP OriMapTabSEXP, SEXP kSEXP, SEXP LSEXP, SEXP ThresholdsSEXP, SEXP b2mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type OriMapTab(OriMapTabSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Thresholds(ThresholdsSEXP);
    Rcpp::traits::input_parameter< int >::type b2m(b2mSEXP);
    rcpp_result_gen = Rcpp::wrap(c_MulV2Bool_Bool2MulV(OriMapTab, k, L, Thresholds, b2m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BioLogical_c_BF_isPointed", (DL_FUNC) &_BioLogical_c_BF_isPointed, 4},
    {"_BioLogical_c_BF_Generator", (DL_FUNC) &_BioLogical_c_BF_Generator, 4},
    {"_BioLogical_c_BF_Sensitivity", (DL_FUNC) &_BioLogical_c_BF_Sensitivity, 2},
    {"_BioLogical_c_BF_Effective", (DL_FUNC) &_BioLogical_c_BF_Effective, 2},
    {"_BioLogical_c_BF_Complexity", (DL_FUNC) &_BioLogical_c_BF_Complexity, 2},
    {"_BioLogical_c_BF_EffectiveEdges", (DL_FUNC) &_BioLogical_c_BF_EffectiveEdges, 2},
    {"_BioLogical_c_BF_QuineMcCluskey", (DL_FUNC) &_BioLogical_c_BF_QuineMcCluskey, 3},
    {"_BioLogical_c_FrameTruthTable", (DL_FUNC) &_BioLogical_c_FrameTruthTable, 1},
    {"_BioLogical_c_B_NestedCanalized", (DL_FUNC) &_BioLogical_c_B_NestedCanalized, 2},
    {"_BioLogical_c_Derrida_Simualtion", (DL_FUNC) &_BioLogical_c_Derrida_Simualtion, 13},
    {"_BioLogical_c_Percolation_Simualtion", (DL_FUNC) &_BioLogical_c_Percolation_Simualtion, 15},
    {"_BioLogical_c_ScalingLaw_Simualtion", (DL_FUNC) &_BioLogical_c_ScalingLaw_Simualtion, 13},
    {"_BioLogical_c_ScalingLaw_RealNet", (DL_FUNC) &_BioLogical_c_ScalingLaw_RealNet, 7},
    {"_BioLogical_c_CoreDynamicNode", (DL_FUNC) &_BioLogical_c_CoreDynamicNode, 8},
    {"_BioLogical_c_BoolFun2Polynomial", (DL_FUNC) &_BioLogical_c_BoolFun2Polynomial, 3},
    {"_BioLogical_c_StrongConnectComponent", (DL_FUNC) &_BioLogical_c_StrongConnectComponent, 3},
    {"_BioLogical_c_MulF_Complexity", (DL_FUNC) &_BioLogical_c_MulF_Complexity, 3},
    {"_BioLogical_c_MulF_Effective", (DL_FUNC) &_BioLogical_c_MulF_Effective, 3},
    {"_BioLogical_c_MulF_EffectiveEdges", (DL_FUNC) &_BioLogical_c_MulF_EffectiveEdges, 3},
    {"_BioLogical_c_MulF_QuineMcCluskey", (DL_FUNC) &_BioLogical_c_MulF_QuineMcCluskey, 3},
    {"_BioLogical_c_MulVF_Generator", (DL_FUNC) &_BioLogical_c_MulVF_Generator, 10},
    {"_BioLogical_c_MulVF_Sensitivity", (DL_FUNC) &_BioLogical_c_MulVF_Sensitivity, 4},
    {"_BioLogical_c_M_NestedCanalized", (DL_FUNC) &_BioLogical_c_M_NestedCanalized, 4},
    {"_BioLogical_c_M_Threshold", (DL_FUNC) &_BioLogical_c_M_Threshold, 4},
    {"_BioLogical_c_M_Domainted", (DL_FUNC) &_BioLogical_c_M_Domainted, 4},
    {"_BioLogical_c_M_Signed", (DL_FUNC) &_BioLogical_c_M_Signed, 4},
    {"_BioLogical_c_MulVFun2Polynomial", (DL_FUNC) &_BioLogical_c_MulVFun2Polynomial, 4},
    {"_BioLogical_c_MulV2Bool_Bool2MulV", (DL_FUNC) &_BioLogical_c_MulV2Bool_Bool2MulV, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BioLogical(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
