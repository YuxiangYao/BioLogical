% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MulVFun_Generator.R
\name{MulVFun_Generator}
\alias{MulVFun_Generator}
\title{Generate a special type multi-valued function}
\usage{
MulVFun_Generator(
  MF_Type = c("R", "C", "D", "T"),
  k = 3L,
  L = 3L,
  Bias = NULL,
  CanaDeep = 1L,
  CanaVar = NULL,
  CanaVarNum = NULL,
  CanaLayerInfo = NULL,
  MappingTable = FALSE
)
}
\arguments{
\item{MF_Type}{a character contained in the following:
 \itemize{
  \item \code{C}: Canalization
  \item \code{D}: Dominated-valued
  \item \code{T}: Linear threshold-based
  \item \code{R}: Random
}}

\item{k}{An integer for the number of input-variable.}

\item{L}{An integer for the level of discrete system.}

\item{Bias}{a numbericVector. Probabilities of elements in non-controlled slots in mapping tables (see \code{Details}).
Default \code{NULL}, means the vector: rep(1.0/L, L).
Its length is larger than L-1. All elements are non-minus real numbers
Its first L element's normalization serves as the bais's configuration.}

\item{CanaDeep}{an integer of 1~k, denoting k-layer canalization for type \code{'C'}. (Default: 1)}

\item{CanaVar}{an \code{CanaDeep}-length non-repeating integer vector, denoting WHICH variabls should be canalized, [1~k]}

\item{CanaVarNum}{an \code{CanaDeep}-length integer vector, denote numbers of each canalizing variable [1~L].
If \code{CanaLayerInfo} provided suitably, \code{CanaVarNum} is useless (Default: NULL, 
automatically set as sample.int(L, CanaDeep, replace=TRUE) implemented in C++ not rather than the corresponding 
native R functions).}

\item{CanaLayerInfo}{a list, detail information for configuration of canalization. [[1]] for input; [[2]] for output.
This argument can should meet specific requirements (see \code{Details}). If not provided (Default: \code{NULL}), 
function will randomly configurate them.
Detail meaning see References of \link{BoolFun_Type}}

\item{MappingTable}{logical value. Is the mapping table also returned? (Default: \code{FALSE})}
}
\value{
L^k length integervector
}
\description{
This function can generate following types: Canalization, 
Linear threshold-based, Dominated-valued.
}
\details{
\code{Bias} merely acts only non-controled slots in mapping table. For example, for a funciton that 
k=3,L=3, f(x1=0) --> f(~)=2 means for all x1!=0 can be filled with probabilities (bias).
Rrequirements \code{CanaLayerInfo}: least two sub-lists denote canalizing and canalized configurating information.
The length of each sub-list should be more than \code{k}. In the each sub-list, canalizing and canalized 
values should be smaller than \code{L}, and \code{CanaLayerInfo[[1]][[i]]} can't have duplicate elements in vector X
Any condition not met wolud throw an error information.
One following example explain this concept.
}
\examples{

# Generate 3-input ternary function. Please note the canalizing/canalized 
# values in the following scenarios:
set.seed(1234L)
Example_01=MulVFun_Generator('C', 3L, 3L, MappingTable=TRUE)
Example_02=MulVFun_Generator('T', 3L, 3L, MappingTable=TRUE)
Example_03=MulVFun_Generator('D', 3L, 3L, MappingTable=TRUE)
# 1=Yes, -1=No (for Canalized)
# 1=Yes, 0=Unknown, -1=No (for Threshold and Domainted)
MulVFun_is_NestedCanalized(Example_01[,4],3L,3L)[[1]]# 1
MulVFun_is_Threshold(Example_01[,4],3L,3L)[[1]]# -1
MulVFun_is_Domainted(Example_01[,4],3L,3L)[[1]]# -1
MulVFun_is_NestedCanalized(Example_02[,4],3L,3L)[[1]]# -1
MulVFun_is_Threshold(Example_02[,4],3L,3L)[[1]]# 1
MulVFun_is_Domainted(Example_02[,4],3L,3L)[[1]]# -1
MulVFun_is_NestedCanalized(Example_03[,4],3L,3L)[[1]]# -1
MulVFun_is_Threshold(Example_03[,4],3L,3L)[[1]]# -1
MulVFun_is_Domainted(Example_03[,4],3L,3L)[[1]]# 1

}
