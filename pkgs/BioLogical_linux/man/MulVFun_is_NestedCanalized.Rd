% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MulVFun_is_NestedCanalized.R
\name{MulVFun_is_NestedCanalized}
\alias{MulVFun_is_NestedCanalized}
\title{Analyze the structure of a multi-valued nested canalized function}
\usage{
MulVFun_is_NestedCanalized(aVec, k, L, PrintOut = FALSE)
}
\arguments{
\item{aVec}{an integer vector, represents a truth table of Boolean function.}

\item{k}{an integer, k-variable of function.}

\item{L}{an integer, L-level multi-valued system.}

\item{PrintOut}{a Boolean value, show output to the terminal.}
}
\value{
a 2-element list (if it is (nested) canalized): [[1]] An integer [[2]] A 
dataframe descirbes the nested structure of a canalized function. (See examples).
}
\description{
This function can return a \code{data.frame} of nested canalized 
structure. Due to algorithm, same level of canalzing variable will return the 
samller variable's ID (See the second example). It is also compatible with 
Boolean system, while here recommend \code{BoolFun_NestedCanalized} for its 
binary feature.
}
\examples{
# Show the canalized structure of a multi-valued nested canalized function.
# Return a data.frame (Also show nested "if-else-if" hierarchical relations).
# set.seed(2025);
# A_MulV_Fun=MulVFun_Generator("C", k=4L, L=3L, CanaDeep=3, 
#   CanaVar=c(2,1,3), CanaLayerInfo=list(list(c(2,0),c(0),c(1,2)), 
#   list(c(0,1),c(2),c(2,0))), MappingTable=TRUE);
# View(A_MulV_Fun);# Show the mapping table.
# A_MulV_Fun_Neseted=MulVFun_is_NestedCanalized(A_MulV_Fun[,5], 4, 3, TRUE);
# Terminal output: 
# if:
# x_1=0 ==> f(x)=1
# x_1=2 ==> f(x)=0
# else if:
#  ..., x_0=0 ==> f(x)=2
# else if:
#  ...,  ..., x_2=1 ==> f(x)=2
#  ...,  ..., x_2=2 ==> f(x)=0
# View(A_MulV_Fun_Neseted); # Show the nested structure.
set.seed(2025);
A_MulV_Fun=MulVFun_Generator("C", k=4L, L=3L, CanaDeep=3, 
  CanaVar=c(2,1,3), CanaLayerInfo=list(list(c(2,0),c(0),c(1,2)), 
  list(c(0,1),c(2),c(2,0))), MappingTable=TRUE);
A_MulV_Fun_Neseted=MulVFun_is_NestedCanalized(A_MulV_Fun[,5], 4, 3, TRUE);

# Second example for same level issue.
# set.seed(2020);
# A_Bool_Fun=MulVFun_Generator("C", k=4L, L=2L, CanaDeep=2, 
#   CanaVar=c(2,3), CanaLayerInfo=list(list(c(0),c(1)), list(c(1),c(1))), 
#   MappingTable = TRUE);
# Please compare the mapping table and printed information.
# A_Bool_Fun_Neseted=MulVFun_is_NestedCanalized(A_Bool_Fun[,5],4,2,TRUE);
# if:
# x_0=1 ==> f(x)=1
# else if:
#  ..., x_1=1 ==> f(x)=1
# else if:
#  ...,  ..., x_2=0 ==> f(x)=1
# else if:
#  ...,  ...,  ..., x_3=0 ==> f(x)=0
#  ...,  ...,  ..., x_3=1 ==> f(x)=1
# In fact, here set the first layer is f(x_1=0) ==> f(x)=1, 
# it is also coupled with f(x_0=0) ==> f(x)=1
set.seed(2020)
A_Bool_Fun=MulVFun_Generator("C", k=4L, L=2L, CanaDeep=2, CanaVar=c(2,3), 
  CanaLayerInfo=list(list(c(0),c(1)), list(c(1),c(1))), MappingTable = TRUE)
A_Bool_Fun_Neseted=MulVFun_is_NestedCanalized(A_Bool_Fun[,5],4,2,TRUE)

}
