% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BoolFun_Polynomial.R
\name{BoolFun_Polynomial}
\alias{BoolFun_Polynomial}
\title{Convert a Boolean function as threshold-based/polynomial forms}
\usage{
BoolFun_Polynomial(Bit_Vec, SpinLikeForm = FALSE, PolyForm = FALSE)
}
\arguments{
\item{Bit_Vec}{a bool (or 0/1-integral) vector, represents a truth table of Boolean function.}

\item{SpinLikeForm}{logical, convert the Boolean function into a spinlike form based or not?}

\item{PolyForm}{logical, should be strict form of polyforms.}
}
\value{
a List, [[1]] is.SAT ture or not? [[2]] Weights of coupled variable. [[3]] Highest order number.
}
\description{
Usually, Boolean functions are presented as logical expressions
including variables and symbols (AND, OR, NOT). When limited to arithmetic 
denotations, a Boolean function can exist only one strict polynomial forms and 
infinite threshold-based interpretations. Sometimes, it can be involved with 
higher-order terms. Please note that this "threshold-based" is not standard 
definition of threshold-based one that only contains ist-order terms.
}
\details{
Boolean functions are generally represented in standard form (0/1) and 
spin-like form (+1/-1). They can be linearly transformed into each other. 
\code{SpinLikeForm} offers users with an option to output representations in 
spin-like form. \code{PolyForm} offers an option to output strict polynomial 
form of Boolean function. For instance, a|b, poly-form: a(1-b)+(1-a)b+ab=a+b+ab; 
threshold-form: theta(a+b)>0. See examples. In the return, x_1, x_2, ... , x_k 
(k-input) present low to high bits.
}
\examples{
# Convert the a Boolean function into a polynomial expression (4 cases).
# BoolFun_Polynomial(c(0,1,1,0,1,0,0,0),F,F);# Boolean threshold (case1)
# BoolFun_Polynomial(c(0,1,1,0,1,0,0,0),T,F);# Spin-like threshold (case2)
# BoolFun_Polynomial(c(0,1,1,0,1,0,0,0),F,T);# Boolean strict poly-forms (case3)
# BoolFun_Polynomial(c(0,1,1,0,1,0,0,0),T,T);# Spin-like strict poly-forms (case4)
# Return [[1]] sat:TRUE, [[2]] (see below), [[3]] HighOrder: 2 or 3
# Detail Weight of four types:
#         x_1       x_2       x_3    x_1x_2    x_1x_3    x_2x_3 x_1x_2x_3  thershold 
# case1     1         1         1        -2        -2        -2      NULL          0 
# case2    -2        -2        -2        -2        -2        -2      NULL          0 
# case3     1         1         1        -2        -2        -2         3          0 
# case4 -0.25     -0.25     -0.25     -0.25     -0.25     -0.25      0.75      -0.25

BoolFun_Polynomial(c(0,1,1,0,1,0,0,0), FALSE, FALSE) # Case1
BoolFun_Polynomial(c(0,1,1,0,1,0,0,0), TRUE, FALSE) # Case2
BoolFun_Polynomial(c(0,1,1,0,1,0,0,0), FALSE, TRUE) # Case3
BoolFun_Polynomial(c(0,1,1,0,1,0,0,0), TRUE, TRUE) # Case4
}
